#!/usr/bin/python3
# Generate the LangTagsMap class

import json

with open('../../../resources/standards-data/langtags/langtags.json') as file:
    data = json.load(file)
    with open('../keyman_config/standards/lang_tags_map.py', 'w') as outputFile:
        outputFile.writelines('''#!/usr/bin/python3
# This file gets amended at build time by `reconf.sh` with data generated by
# `buildtools/build-langtags.py`.
# The data comes from `resources/standards-data/langtag/langtags.json`.

class LangTagsMap():
    @staticmethod
    def lookupLangTags(language):
        if language in LangTagsMap.__langTags:
            return LangTagsMap.__langTags[language]
        return None

    @staticmethod
    def lookupAllTags(language):
        if language in LangTagsMap.__allTags:
            return LangTagsMap.__allTags[language]
        return None

    @staticmethod
    def translateISO6393ToBCP47(code):
        if code in LangTagsMap.__map3To2:
            return LangTagsMap.__map3To2[code]
        return code

''')

        langTags = []
        allTags = []
        map3To2 = []
        for lang in data:
            if 'full' in lang:
                script = lang['script'] if 'script' in lang else ''
                suppress = lang['suppress'] if 'suppress' in lang else 'False'
                region = lang['region'] if 'region' in lang else ''
                if 'iso639_3' in lang:
                    if lang['tag'] != lang['iso639_3']:
                        if len(lang['tag']) < 3:
                            map3To2.append("'%s': '%s'" % (lang['iso639_3'], lang['tag']))
                langTags.append("'%s': {'full': '%s', 'region': '%s', 'script': '%s', 'suppress': %s}" % (
                  lang['tag'], lang['full'], region, script, suppress))
                allTags.append("'%s': '%s'" % (lang['tag'], lang['tag']))
                if lang['tag'] != lang['full']:
                    allTags.append("'%s': '%s'" % (lang['full'], lang['tag']))
                if 'tags' in lang:
                    for tag in lang['tags']:
                        if tag != lang['full'] and tag != lang['tag']:
                            allTags.append("'%s': '%s'" % (tag, lang['tag']))

        langTagsString = ',\n      '.join(map(str, langTags))
        allTagsString = ',\n      '.join(allTags)
        map3To2String = ',\n      '.join(map3To2)
        outputFile.write("    __langTags = {\n      %s}\n\n" % langTagsString)
        outputFile.write("    __allTags = {\n      %s}\n\n" % allTagsString)
        outputFile.write("    __map3To2 = {\n      %s}\n" % map3To2String)
